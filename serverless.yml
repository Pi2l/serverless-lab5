# Варіанти завдань
# Варіант 1. Реєстрація  та оновлення організації та користувача
# POST /organizations: створення Organization (поля: orgId, name, description).
# POST /organizations/{orgId}/users: реєстрація User (поля: userId, name, email) у організації.
# PUT /organizations: оновлення Organization (поля: orgId, name, description).
# PUT /organizations/{orgId}/users: оновлення User (поля: userId, name, email) у організації.
# Збереження в DynamoDB таблицях Organizations, Users.
# Перевірка належності userId до orgId, чи вже існує користувач з подібним email, чи вже існує організація з такою назвою
# Повернути response з відповідним статус кодом

service: serverless-lab

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x

functions:
  sqsHandler:
    handler: handler.sqsHandler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - UserQueue
              - Arn
      - sqs:
          arn:
            Fn::GetAtt:
              - OrganizationQueue
              - Arn

resources:
  Resources:
    OrganizationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: organizations
        AttributeDefinitions:
          - AttributeName: orgId
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: orgId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: name-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: orgId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: orgId-index
            KeySchema:
              - AttributeName: orgId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    UserQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: UserQueue
        VisibilityTimeout: 30

    OrganizationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrganizationQueue
        VisibilityTimeout: 30

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://127.0.0.1:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false


plugins:
  - serverless-offline
  - serverless-dynamodb
  - serverless-offline-sqs